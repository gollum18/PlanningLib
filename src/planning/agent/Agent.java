package planning.agent;

import planning.geom.Grid;
import planning.geom.Point;

import java.util.LinkedList;

public abstract class Agent {

    /*
        Fields
     */

    private Point mStart;
    private Point mGoal;

    /*
        Constructors
     */

    /**
     * Creates an instance of an Agent with the given specifications.
     * @param sx The starting x ordinal.
     * @param sy The starting y ordinal.
     * @param gx The goal x ordinal.
     * @param gy The goal y ordinal.
     */
    public Agent(int sx, int sy, int gx, int gy) {
        mStart = new Point(sx, sy);
        mGoal = new Point(gx, gy);
    }

    /*
        Accessors/Mutators
     */

    /**
     * Returns the starting position.
     * @return Point: The starting position.
     */
    public Point getStart() {
        return mStart;
    }

    /**
     * Returns the goal position.
     * @return Point: The goal position.
     */
    public Point getGoal() {
        return mGoal;
    }

    /*
        Methods
     */

    /**
     * Generates a list containing the path.
     * @param grid The grid to path find across.
     * @return LinkedList: A list containing the path.
     */
    public abstract LinkedList<Point> traverse(Grid grid);

    /**
     * Generates a list of points that represent the path.
     * @param node Node: The last node in the path, cannot be null.
     * @return LinkedList: A list containing the path generated by the agent.
     */
    public LinkedList<Point> generatePath(Node node) {
        if (node == null) {
            throw new IllegalArgumentException("ERROR: Node cannot be null!");
        }
        LinkedList<Point> path = new LinkedList<>();
        while (node != null) {
            path.add(new Point(node.getPosition().getX(), node.getPosition().getY()));
            node = node.getParent();
        }
        return path;
    }

    /**
     * Determines if a node is equal to the goal position.
     * @param node Node: The node to check.
     * @return boolean: Whether the position is equal to the goal or not.
     */
    public boolean isGoalNode(Node node) {
        return mGoal.getX() == node.getPosition().getX() && mGoal.getY() == node.getPosition().getY();
    }

}
