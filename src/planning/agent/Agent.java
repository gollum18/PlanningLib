package planning.agent;

import planning.geom.Grid;
import planning.geom.Point;

import java.util.LinkedList;

/**
 * Defines an abstract Agent for creating search agents.
 */
public abstract class Agent {

    /*
        Methods
     */

    /**
     * Generates a list of points that represent the path.
     * @param node Node: The last node in the path, cannot be null.
     * @return LinkedList: A list containing the path generated by the agent.
     */
    public LinkedList<Point> generatePath(Node node) {
        if (node == null) {
            throw new IllegalArgumentException("ERROR: Node cannot be null!");
        }
        LinkedList<Point> path = new LinkedList<>();
        while (node != null) {
            path.add(new Point(node.getPosition().getX(), node.getPosition().getY()));
            node = node.getParent();
        }
        return path;
    }

    /**
     * Smooths the path by removing unnecessary vertices with line of sight.
     * @param path LinkedList: A list of points containing the path found by the agent.
     * @param grid Grid: The search grid used to find the path. Needed for line of sight functionality.
     * @return LinkedList: A list of points containing a smoothed path.
     */
    public LinkedList<Point> smoothPath(LinkedList<Point> path, Grid grid) {
        LinkedList<Point> smoothedPath = new LinkedList<>();
        int k = 0;
        Point prev = path.get(0);
        for (int i = 1; i < path.size() - 1; i++) {
            if (!grid.lineOfSight(prev, path.get(i+1))) {
                k += 1;
                smoothedPath.add(path.get(i));
            }
        }
        k += 1;
        smoothedPath.add(path.get(k)); // Add the goal
        return smoothedPath;
    }

    /**
     * Generates a list containing the path.
     * @param grid The grid to path find across.
     * @return LinkedList: A list containing the path.
     */
    public abstract LinkedList<Point> traverse(Grid grid);

}
